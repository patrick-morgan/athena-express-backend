generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model article {
  id                                           String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                   DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime?           @default(now()) @db.Timestamp(6)
  title                                        String              @db.VarChar(255)
  subtitle                                     String?             @db.VarChar(255)
  date                                         DateTime            @db.Timestamp(6)
  text                                         String
  publication                                  String              @db.Uuid
  publication_article_publicationTopublication publication         @relation("article_publicationTopublication", fields: [publication], references: [id])
  article_authors                              article_authors[]
  objectivity_bias                             objectivity_bias[]
  polarization_bias                            polarization_bias[]
  summary                                      summary[]
}

model article_authors {
  article_id    String     @db.Uuid
  journalist_id String     @db.Uuid
  article       article    @relation(fields: [article_id], references: [id])
  journalist    journalist @relation(fields: [journalist_id], references: [id])

  @@id([article_id, journalist_id])
}

model journalist {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  name            String            @db.VarChar(255)
  article_authors article_authors[]
}

model objectivity_bias {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  article_id     String    @db.Uuid
  rhetoric_score Decimal   @db.Decimal
  analysis       String
  footnotes      Json?
  article        article   @relation(fields: [article_id], references: [id])
}

model polarization_bias {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  article_id String    @db.Uuid
  analysis   String
  bias_score Decimal   @db.Decimal
  footnotes  Json?
  article    article   @relation(fields: [article_id], references: [id])
}

model publication {
  id                                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                               DateTime? @default(now()) @db.Timestamp(6)
  updated_at                               DateTime? @default(now()) @db.Timestamp(6)
  name                                     String    @db.VarChar(255)
  date_founded                             DateTime  @db.Timestamp(6)
  url                                      String    @db.VarChar(255)
  owner                                    String?   @db.VarChar(255)
  article_article_publicationTopublication article[] @relation("article_publicationTopublication")
}

model summary {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  article_id String?   @db.Uuid
  summary    String
  footnotes  Json?
  article    article?  @relation(fields: [article_id], references: [id])
}
